#![no_main]
#![no_std]
#![feature(type_alias_impl_trait)]

use test_app as _; // global logger + panicking-behavior + memory layout

const SHARED_SIZE: usize = 8;

const A_MATRIX_ROWS: usize = 40;
const A_MATRIX_COLUMNS: usize = SHARED_SIZE;

const B_MATRIX_ROWS: usize = SHARED_SIZE;
const B_MATRIX_COLUMNS: usize = 8;

const RESULT_MATRIX_ROWS: usize = A_MATRIX_ROWS;
const RESULT_MATRIX_COLUMNS: usize = B_MATRIX_COLUMNS;
// TODO(7) Configure the `rtic::app` macro
#[rtic::app(
    device = rp_pico::hal::pac,
    dispatchers = [TIMER_IRQ_2],
    peripherals = true
)]
mod app {
    use core::fmt::Write;
    use rp2040_hal::fugit::RateExtU32;
    use rp2040_hal::{clocks, Clock, Watchdog};
    use rp2040_hal::{
        gpio::{
            bank0::{Gpio0, Gpio1},
            FunctionUart, PullDown,
        },
        uart::{DataBits, Enabled, StopBits, UartConfig, UartPeripheral},
    };
    use rp2040_monotonic::Rp2040Monotonic;
    use rp_pico::pac::UART0;
    use rp_pico::XOSC_CRYSTAL_FREQ;
    use test_app::{exit, get_stack, setup_clocks, tick, time_us_64, write_to, PointerWrapper, TimerRegs};
    #[monotonic(binds = TIMER_IRQ_0, default = true)]
    type Rp2040Mono = Rp2040Monotonic;
    use rp2040_hal::gpio::Pin;
    // Shared resources go here
    #[shared]
    struct Shared {
        // TODO: Add resources
        #[lock_free]
        timer_regs: TimerRegs,
        sleep_time: u64,
        #[lock_free]
        concurrent_tasks: u8,
        #[lock_free]
        a_matrix: [f64; crate::A_MATRIX_ROWS * crate::A_MATRIX_COLUMNS],
        #[lock_free]
        b_matrix: [f64; crate::B_MATRIX_ROWS * crate::B_MATRIX_COLUMNS],
        #[lock_free]
        result_matrix: [f64; crate::RESULT_MATRIX_ROWS * crate::RESULT_MATRIX_COLUMNS],
        #[lock_free]
        uart: UartPeripheral<
            Enabled,
            UART0,
            (
                Pin<Gpio0, FunctionUart, PullDown>,
                Pin<Gpio1, FunctionUart, PullDown>,
            ),
        >,
    }

    // Local resources go here
    #[local]
    struct Local {
        last_timer_value: u64,
        start_time: u64,
        start_stack: u32,
        largest_stack: u32
        
    }

    #[init]
    fn init(ctx: init::Context) -> (Shared, Local, init::Monotonics) {
        let mut pac = ctx.device;

        let timerawh = pac.TIMER.timerawh.as_ptr();
        let timerawl = pac.TIMER.timerawl.as_ptr();

        let mut watchdog = Watchdog::new(pac.WATCHDOG);
        let clocks = clocks::init_clocks_and_plls(
            XOSC_CRYSTAL_FREQ,
            pac.XOSC,
            pac.CLOCKS,
            pac.PLL_SYS,
            pac.PLL_USB,
            &mut pac.RESETS,
            &mut watchdog,
        )
        .ok()
        .unwrap();
        // The single-cycle I/O block controls our GPIO pins
        let sio = rp2040_hal::Sio::new(pac.SIO);

        // Set the pins to their default state
        let pins = rp2040_hal::gpio::Pins::new(
            pac.IO_BANK0,
            pac.PADS_BANK0,
            sio.gpio_bank0,
            &mut pac.RESETS,
        );

        let uart_pins = (
            // UART TX (characters sent from RP2040) on pin 1 (GPIO0)
            pins.gpio0.into_function(),
            // UART RX (characters received by RP2040) on pin 2 (GPIO1)
            pins.gpio1.into_function(),
        );
        let uart = rp2040_hal::uart::UartPeripheral::new(pac.UART0, uart_pins, &mut pac.RESETS)
            .enable(
                UartConfig::new(115200.Hz(), DataBits::Eight, None, StopBits::One),
                clocks.peripheral_clock.freq(),
            )
            .unwrap();

        let timer_regs = TimerRegs {
            hi: PointerWrapper(timerawh),
            lo: PointerWrapper(timerawl),
        };


        for i in 0..crate::RESULT_MATRIX_ROWS {
            task_i_row::spawn(i).ok();
        }
        
        //task_reference::spawn();
        

        let mono = Rp2040Monotonic::new(pac.TIMER);

        (
            Shared {
                timer_regs,
                sleep_time: 0,
                concurrent_tasks: crate::RESULT_MATRIX_ROWS as u8,
                result_matrix: [0.0; crate::RESULT_MATRIX_ROWS * crate::RESULT_MATRIX_COLUMNS],
                a_matrix: [8328.561272830071, 5760.479326633898, 736.0964390503694, 6743.884434013153, 510.70595969685905, 8097.236248287528, 4952.85655500769, 8812.615271994579, 5979.330570325242, 2850.258859929918, 8063.882857605042, 7484.6710354952975, 2633.6874628935766, 5147.324777902035, 94.31842712789725, 2571.8727589393875, 8433.503903051884, 4260.554298840628, 9218.668539224163, 9290.253292029374, 9042.02356361991, 7992.626027205201, 1386.4679508894067, 9782.364152412742, 365.93134305505794, 5761.262574636073, 8536.872697478137, 418.24582930979955, 5600.535624166698, 1309.8230839512228, 2304.5828593340616, 9289.060872437314, 7505.5139221238505, 7615.748901960131, 4480.590132996024, 7707.404494278379, 4505.534373747045, 850.2467832860997, 7217.19820479203, 7083.106255568913, 9313.356557408893, 710.3613165666885, 8122.642344579666, 9509.910107737036, 3974.255390222919, 5980.686979517669, 123.78291944856564, 7631.037036096669, 5642.665536611767, 5675.890475739037, 5099.913783191198, 1966.7696013724294, 3766.5225053339695, 4078.420651018257, 2284.9016260938242, 20.08566346985684, 2968.225274295352, 4569.060117797476, 7946.653918076951, 8379.906018207328, 6456.859783335987, 1523.6255823262597, 9989.083209164031, 1899.0773702855622, 9489.726748209134, 459.1206492068996, 7904.62442090035, 4315.939034938465, 35.84680489913104, 7293.096684210685, 4605.767888082989, 6044.173514585484, 7391.84536950268, 7503.297719639493, 8904.557341918267, 9085.296084164218, 8068.633867621769, 4751.45277176842, 6368.416355665074, 6885.689233787186, 4399.222768849634, 2943.923650886639, 3507.2965520950947, 9913.952217555727, 6840.1446074598225, 890.4850534621792, 1581.0338813203193, 1096.146903562797, 3350.921430464335, 5180.134554240256, 731.7792490307828, 4047.2841044253382, 6904.517653763187, 7168.558078166799, 195.27064925759586, 5990.09737503319, 8350.486474304613, 8273.766342760497, 9972.493634765116, 8306.568854588224, 4431.326657099818, 2739.442725629446, 9536.110899237125, 8692.987648047014, 1455.1470774269221, 2612.734364807753, 9967.761260640522, 37.46014388396824, 3998.4882358783825, 1693.0686915030892, 8980.795916407169, 3111.900501232987, 1774.170718732287, 8426.94409338944, 6790.797917704023, 2386.2683417300514, 9074.48772284087, 4531.169118254349, 392.4094267047255, 4646.330419423991, 2534.511084721911, 405.6938881390345, 8589.81597781289, 8080.659453196394, 464.19185191833293, 6630.715574822003, 8377.560166387024, 1259.1541793889467, 1300.8055940799047, 3383.961023440339, 8933.133848819529, 4297.925442107017, 5033.959216955343, 8394.880598369067, 9851.246619010057, 3178.251159465213, 7481.064866890166, 7625.533351973302, 8103.263191189257, 9222.500277046216, 7511.139516722583, 4937.82995930339, 7074.8462103853, 325.36107430151174, 6873.810847275417, 9803.310733013801, 6858.942533839292, 2960.4746508454405, 2515.2401703932755, 1584.9237583067663, 885.6686486813654, 752.4726024256247, 1264.3210883881945, 4606.021684147409, 467.1650272235397, 5212.653141070478, 1324.09751778891, 868.9369444824239, 9721.775405129585, 224.48516489830553, 9778.202683783407, 6243.63195050598, 6940.105505856748, 127.11806114817777, 2442.336303468395, 4892.617330280895, 2837.2092197212137, 2771.7308020072483, 4103.071461732098, 9473.26426151531, 6635.856305831687, 4666.104335631239, 9332.533534622102, 1523.1987799488857, 4842.486090238999, 9427.69985329759, 8272.234258888098, 4841.806246125504, 629.2072253587302, 7756.883992477518, 6570.167810645578, 6643.123641988705, 6432.706907055661, 374.3547289609428, 6626.421290259244, 2924.879603114409, 4982.768446450704, 2165.6545204544623, 7649.227154354105, 7045.6458991418385, 1350.261460532108, 2426.641267914537, 4281.969964743328, 9649.34688600939, 196.866476542969, 9533.336580828109, 3777.1487107855673, 9566.54300372311, 3611.367810917475, 6342.442161861184, 4023.3322037869725, 2812.888139493019, 7401.799944765502, 2251.1073490886074, 6801.124311123751, 681.4250048066416, 3354.1179406692713, 8867.7685665438, 7291.984448616806, 1026.64306908997, 3529.0164772420444, 9358.994506915462, 5397.422690040243, 8070.707520192019, 6873.670004174996, 713.8547632416692, 6110.4599677609895, 4037.554471063591, 7767.098991249109, 9832.279261008001, 7781.409800886722, 6553.260445562103, 3803.6077231893855, 946.8930568389075, 1800.5724558584375, 8322.314186342579, 8115.577444723517, 2897.3562761293506, 5553.811027974596, 4705.815054532128, 2220.9413038240004, 8350.024337372546, 7732.4645243588175, 7697.344829485049, 8141.287409503636, 6601.857140805429, 2738.5342017649978, 6272.151051378781, 2562.8704340706436, 7754.52867601065, 8242.550778683968, 4309.852138912263, 43.00908581110318, 8352.115607847561, 8396.982421841347, 6832.022162745664, 8454.971422870767, 6151.186184542279, 8628.103871085144, 5793.631712276701, 5657.98461027196, 7045.868770476427, 9200.081120300145, 1837.240190471951, 4659.163888571515, 2789.4260686534335, 1966.3648728724838, 3996.1096502616465, 3316.4741299565426, 7014.280079758934, 2975.091475843932, 9754.571928335921, 143.27725138291186, 5281.765726255655, 5835.30071284999, 1283.4360081942289, 902.5798875143811, 7004.020188286266, 1877.417175364235, 1051.4697628056947, 4176.483591335018, 7574.431605244763, 891.4469585345735, 3905.014197981956, 8828.200947141624, 5997.96055653145, 6332.942426820908, 2288.103933844415, 5296.272313262168, 9630.890453283831, 2808.66736789491, 7596.455375488386, 1637.5208845723926, 4977.689047970916, 6379.253569125167, 3972.0277439937317, 1492.8280992919447, 4714.812878022898, 5933.343500400321, 5605.20117509941, 8983.710354636485, 7336.142105905529, 1596.9280395752603, 7793.1099008054, 3532.8844921712007, 6638.505994786937, 4802.505066764974, 6718.510449719406, 193.8007899095487, 154.16520330480313, 6027.992721781314, 682.7949997547385, 9912.380297074884, 1323.76631788482, 28.534518269250825, 5383.165524598863, 8478.357454819941, 5341.635849328677, 353.68168833832334, 9826.175366931608, 2970.5748558359023, 7948.329476746952, 9270.417378178872, 9282.912550840254, 758.9810774738097, 5432.532935266527, 7811.976889425469, 62.727653480682115, 6230.752414451907, 7284.168386356472],
                b_matrix: [7306.356466686079, 4673.634312414664, 1929.5006095153224, 2893.999987731718, 9108.11443427481, 8665.546225356136, 6453.497015106854, 5834.421568513551, 1495.8187775164647, 2214.4780128128577, 1042.2860818388567, 4614.19981030738, 3379.217688534908, 8695.134332892727, 1200.5133047462105, 6167.071428770815, 5487.09588484807, 5510.027992038766, 1713.3523047637732, 34.93024417628875, 6362.871146630318, 302.02492039582944, 2975.289877038248, 2082.3617965481903, 6237.702534319167, 1714.7399486283355, 5332.8559930787005, 2321.7417401121756, 1188.613488029675, 6010.93865021196, 3306.5935593179915, 5225.731359075913, 4308.289351629614, 2954.8049165407, 3504.4985138280213, 1057.0182080247257, 7816.642082649852, 6298.06890170052, 1587.3527696020444, 4058.3628693281653, 4719.256822778476, 657.7201920228886, 1416.1721565616551, 659.4693477429596, 4389.176197506568, 5794.516271648073, 5164.871091350065, 3888.5488942058055, 9236.834093414645, 7560.2472157663815, 1853.7610641346591, 5335.52039761276, 4728.138016706821, 5387.7761779812745, 8192.639944211338, 4099.617175735438, 2185.396215109098, 3350.5867937045828, 9187.53728171408, 3991.9612906148727, 8648.404023783747, 2009.7756522649092, 4245.828707335097, 3865.1257591364274],
                uart

            },
            Local {
                start_time: 0,
                last_timer_value: 0,
                start_stack: 0,
                largest_stack: u32::MAX
            },
            init::Monotonics(mono),
        )
    }


    #[task(shared = [result_matrix, a_matrix, b_matrix, concurrent_tasks, timer_regs, uart])]
    fn task_reference(ctx: task_reference::Context) {
        let tim = ctx.shared.timer_regs;
        let usart = ctx.shared.uart;
        let start_time = time_us_64(tim.hi.0,tim.lo.0);
        for i in 0..crate::RESULT_MATRIX_ROWS {
            for j in 0..crate::RESULT_MATRIX_COLUMNS {
                let mut tmp: f64 = 0.0;
                for k in 0..crate::A_MATRIX_COLUMNS {
                    tmp = tmp
                        + ctx.shared.a_matrix[i * crate::A_MATRIX_COLUMNS + k]
                            * ctx.shared.b_matrix[k * crate::B_MATRIX_COLUMNS + j];
                }

                ctx.shared.result_matrix[i * crate::RESULT_MATRIX_COLUMNS + j] = tmp;
            }
        }
        core::hint::black_box(ctx.shared.result_matrix);
        let end_time = time_us_64(tim.hi.0, tim.lo.0);
        writeln!(usart, "{}", end_time-start_time).ok();
    }

    #[task(shared = [result_matrix, a_matrix, b_matrix, concurrent_tasks, timer_regs, uart], local = [start_time, start_stack, largest_stack], capacity = 40)]
    fn task_i_row(ctx: task_i_row::Context, i: usize) {
        
        tick(ctx.local.largest_stack);
        
        let n_tasks = ctx.shared.concurrent_tasks;
        let tim = ctx.shared.timer_regs;
        if i == 0 {
            *ctx.local.start_time = time_us_64(tim.hi.0,tim.lo.0);
        }
        let usart = ctx.shared.uart;
        for j in 0..crate::RESULT_MATRIX_COLUMNS {
            let mut tmp: f64 = 0.0;
            for k in 0..crate::A_MATRIX_COLUMNS {

                tick(ctx.local.largest_stack);

                tmp = tmp
                    + ctx.shared.a_matrix[i * crate::A_MATRIX_COLUMNS + k]
                        * ctx.shared.b_matrix[k * crate::B_MATRIX_COLUMNS + j];
            }

            ctx.shared.result_matrix[i * crate::RESULT_MATRIX_COLUMNS + j] = tmp;
        }
        

        core::hint::black_box(ctx.shared.result_matrix);

        *n_tasks = *n_tasks - 1;

        tick(ctx.local.largest_stack);

        if *n_tasks == 0 {
            let end_time = time_us_64(tim.hi.0, tim.lo.0);
            //writeln!(usart, "{:?}", end_time-*ctx.local.start_time).ok();
            writeln!(usart, "{:08x}", ctx.local.largest_stack).ok();
        }
    }
}
