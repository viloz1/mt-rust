#![no_main]
#![no_std]
#![feature(type_alias_impl_trait)]

use md407 as _;
const A_MATRIX_ROWS: usize = 15;

const SHARED_SIZE: usize = 15;

const B_MATRIX_COLUMNS: usize = 15;

const A_MATRIX_COLUMNS: usize = SHARED_SIZE;
const B_MATRIX_ROWS: usize = SHARED_SIZE;

const RESULT_MATRIX_ROWS: usize = A_MATRIX_ROWS;
const RESULT_MATRIX_COLUMNS: usize = B_MATRIX_COLUMNS;
// TODO(7) Configure the `rtic::app` macro
#[rtic::app(
    device = stm32f4xx_hal::pac,
    dispatchers = [EXTI4],
    peripherals = true
)]
mod app {
    use hal::timer::CounterUs;

    use hal::uart::Serial;
    use md407::{get_stack, hal, reset, setup_usart, tick, time_us_64};

    use core::fmt::Write;
    use hal::pac::{SCB, TIM2, USART1};
    use hal::prelude::*;
    use systick_monotonic::*;

    #[monotonic(binds = SysTick, default = true)]
    type Tonic = Systick<100>;

    // Shared resources go here
    #[shared]
    struct Shared {
        // TODO: Add resources
        #[lock_free]
        usart: Serial<USART1>,
        sleep_time: u64,
        #[lock_free]
        timer: CounterUs<TIM2>,
        #[lock_free]
        concurrent_tasks: u8,
        #[lock_free]
        a_matrix: [f64; crate::A_MATRIX_ROWS * crate::A_MATRIX_COLUMNS],
        #[lock_free]
        b_matrix: [f64; crate::B_MATRIX_ROWS * crate::B_MATRIX_COLUMNS],
        #[lock_free]
        result_matrix: [f64; crate::RESULT_MATRIX_ROWS * crate::RESULT_MATRIX_COLUMNS],
    }

    // Local resources go here
    #[local]
    struct Local {
        last_timer_value: u64,
        start_stack: u32,
        start: u64,
        largest_stack: u32
    }

    #[init]
    fn init(ctx: init::Context) -> (Shared, Local, init::Monotonics) {
        let dp = ctx.device;
        let cp = ctx.core;
        let rcc = dp.RCC.constrain();
        let clocks = rcc
            .cfgr
            .require_pll48clk()
            .sysclk(168.MHz())
            .pclk1(8.MHz())
            .use_hse(25.MHz())
            .freeze();

        let gpioa = dp.GPIOA.split();
        let tx_pin = gpioa.pa9.into_alternate();
        let rx_pin = gpioa.pa10.into_alternate();
        let usart1 = dp.USART1;

        let mut serial = setup_usart(usart1, tx_pin, rx_pin, clocks);

        let systick = cp.SYST;
        let mono = Systick::new(systick, 168_000_000);


        unsafe {
            cortex_m::peripheral::NVIC::unmask(hal::interrupt::TIM2);
            cortex_m::peripheral::NVIC::unmask(hal::interrupt::TIM4);
        }
        for i in 0..crate::RESULT_MATRIX_ROWS {
            task_i_row::spawn(i).ok();
        }
        //task_reference::spawn().ok();
        let start_stack = get_stack();

        let mut timer = dp.TIM2.counter(&clocks);
        timer.start((300 as u32).secs()).ok();

        (
            Shared {
                timer,
                usart: serial,
                sleep_time: 0,
                concurrent_tasks: crate::RESULT_MATRIX_ROWS as u8,
                result_matrix: [0.0; crate::RESULT_MATRIX_ROWS * crate::RESULT_MATRIX_COLUMNS],
                a_matrix: {1479.0518722421232, 5749.574217700678, 7551.302798173875, 2469.2988431803396, 9047.848524846402, 6303.482634967247, 4616.9463724094885, 8791.669367854785, 2281.8496132586765, 4280.6973021116355, 3152.968458694187, 4386.056644039195, 2170.3852970873145, 8861.065859263457, 5414.844099657571, 2953.206124908399, 5929.039817738471, 5253.016824556196, 2725.3055216200546, 6604.5628066955815, 126.05070526803297, 4571.230273481541, 2178.3360151218626, 2773.661348956769, 4868.863940348129, 4262.1494132816615, 536.6983928119927, 1338.3830110157755, 5178.094233363333, 9206.167936339678, 5226.626657217823, 8486.87683085098, 932.808170414309, 4470.761415711473, 3221.263900160619, 6706.068073173617, 3567.283894393925, 8417.90847295328, 9891.384197449146, 964.599578056001, 6004.968781494979, 2329.4837384312737, 8151.302227060866, 6825.4787744524865, 2732.157552237023, 7357.422124376915, 4479.536443455424, 3915.1092203810385, 7990.515987835328, 5698.019337933439, 8103.176353301037, 4835.7376127526695, 2471.943561431661, 8706.17026490258, 9847.944992337765, 3064.7118760086205, 4761.839462737412, 5525.632582778482, 5218.980311972276, 2858.8952451038367, 4976.669003549171, 5846.065853594086, 1269.9217279454856, 6806.075944100936, 676.7537561419824, 299.6780920251947, 5919.029443802305, 8249.346454185725, 4099.697547453973, 7944.524159366979, 1024.2378130295097, 8469.267874296345, 2391.557051601434, 657.9793939673864, 2950.430859614394, 439.7426995329746, 2269.0792723808986, 7006.978996211548, 6671.08130050067, 6686.400154742785, 7893.002674593331, 9419.260737277229, 6337.793753710129, 6981.625226069036, 9969.927846726407, 1877.1244059799128, 3825.380916776551, 7305.1034692326475, 7155.808676991957, 7124.549527886545, 4170.398056159812, 7615.335252380867, 8267.938039120008, 5656.8690131283565, 833.3260745662185, 3262.6649365879102, 9539.52307618036, 3172.881072864475, 9807.638044996447, 7702.286972168468, 392.2344304738171, 2112.7831780567453, 5660.307995174617, 2958.6017314607716, 9322.882278877749, 6185.716312665861, 4469.833075719508, 5519.256285951351, 9667.936863961291, 3198.6259241848084, 4078.9669120187455, 2923.4013006217483, 4010.218390944232, 7705.530144371291, 6046.699023451171, 6765.430423024479, 222.7299820756864, 6937.627824563113, 5804.2285800576865, 5350.507025697219, 1962.8551216722378, 1960.6013189213816, 2405.935206011269, 8757.33451188645, 5302.293153451225, 5684.144025597708, 1376.2382600196136, 6534.62804938907, 3291.034456844227, 9435.361965988755, 7180.352292062806, 6314.941703963595, 7265.315354198879, 3142.607292736465, 2924.4608821872525, 1654.565079901324, 1033.329361098875, 360.61355095849615, 2128.0778748188277, 9596.50928718538, 890.9188119186355, 9588.09119624255, 9367.34112623676, 2062.655430091292, 731.4782376960121, 3693.5508343814363, 9125.106690046658, 3876.8313306676137, 8599.029405072406, 311.7003967933632, 4321.083024795648, 768.2741984401775, 3539.8109690889246, 4359.065820844833, 7459.362267627725, 9808.532926319374, 2283.157971308394, 8992.486320632583, 2062.0998410055468, 4574.986207144609, 5117.727670511899, 4156.172303626728, 2603.821601436196, 4644.582386135688, 7278.271555270961, 5352.394028840935, 6726.056251213773, 6412.056559256583, 5522.842003955128, 7082.845886479979, 5718.906462302866, 819.1179626467342, 1011.1913243049257, 8919.156673409541, 239.94461799517285, 8865.714763689417, 3115.5612203544497, 3802.070706741844, 5859.635014267383, 1802.259571410776, 5487.621793155312, 357.47510186848064, 4077.8548407919607, 2146.56250584718, 4589.271946857851, 5303.705939041526, 9428.89944888918, 7791.320853175259, 5381.037652746898, 9049.947292234636, 9670.439613385639, 9966.089337437523, 8641.231645416241, 2711.8774576560204, 3857.612566083435, 1427.2355770854772, 2427.6897246730928, 3145.9278112681736, 7680.611596879993, 6846.1704319884875, 1572.3800384904016, 4281.343930787506, 1711.6257375352657, 7223.217176910835, 3601.837230330163, 6723.400163221079, 2707.6562420260475, 8701.33433773982, 6054.955148711879, 702.0582113861324, 8983.255105675446, 5015.058939627152, 8033.133065737639, 2754.6282589415105, 5671.221881072199, 3278.849062150839, 1286.6967625784182, 5109.52493807728, 8001.689149076737, 21.77565058016136, 2787.5695331104403, 6872.114103469245, 8337.336858116552, 7303.923385975085, 5822.447001001812},
                b_matrix: {102.10179438030463, 3813.556154185429, 6110.625322531961, 425.6139228063425, 3770.676742907494, 376.7028024781261, 5554.531299118183, 3850.509079411712, 5996.290486517348, 4267.846871711389, 442.35529023593136, 9564.200996680183, 7203.949744795202, 5583.984238700684, 4142.459251841765, 5539.013762757244, 4271.139256871588, 6231.628062316054, 8070.974454019363, 6599.301276608708, 8952.728372795225, 5894.718246209407, 7337.5756501432015, 125.8102444474927, 5263.31263357463, 6691.842846693073, 6289.7260473683855, 2158.2416950789907, 9262.639683339195, 7628.041449029556, 492.7998523817331, 3777.472398005082, 7315.49164240175, 2279.03549760431, 1712.2479990449203, 5245.29791061449, 5717.18855233919, 7452.429329155466, 4821.809317837454, 7322.668999730621, 9442.708340468123, 5633.378712218597, 7812.072129931729, 5485.234668110527, 8031.609934996456, 4546.506126364561, 3812.257112641965, 6614.601970647644, 518.632277901903, 7972.544001038174, 7950.107307338291, 7595.308853332355, 8455.777559717875, 8946.436187623927, 3414.1743279023776, 3297.680554965081, 9003.763014633472, 773.2736826344637, 9314.864351264776, 4946.00531058494, 3134.3356644087753, 9702.591139256469, 3774.8386791285666, 3417.163421872704, 6710.778342092767, 693.901738899109, 2580.3724854268603, 1739.8315047004373, 8350.430091058599, 1271.1234650336178, 3592.984940844995, 3269.7463618294805, 2875.2843548393475, 3825.091120933256, 103.9207946089632, 1611.9616293158533, 9889.24780051567, 3989.117964588308, 3089.9969671640656, 8169.081708102851, 5488.114190063244, 932.2844227710801, 2879.7848962638072, 6435.615818551979, 2736.2979487201064, 5057.198229918801, 9343.674733931273, 3504.24276979256, 8626.762335989037, 8613.136629409442, 5296.06038061351, 5228.628574754413, 1736.2504920136141, 6547.171739757885, 7421.55130871375, 2916.765200063833, 1880.7516027511692, 1259.853807552684, 2770.141874222095, 7335.958903625692, 707.0259374851582, 8313.388292195727, 4904.481622689858, 3533.311369991238, 1199.5356235591057, 7161.633895858605, 7268.9103263028965, 1495.7078193617833, 1403.0545935870941, 3633.4448850459967, 3790.054752877463, 6476.95553536386, 2255.1059576920175, 4258.873892563776, 3411.0180719970845, 9747.328418172212, 9292.266640965645, 5049.212555611871, 290.10997147585647, 9595.867654399266, 3741.99405030238, 8832.601859388156, 6064.999047828007, 8499.724436328177, 8599.746234035969, 9676.921779229417, 9463.95501155219, 4813.668137895427, 4045.5814715541615, 2241.6336999787645, 6526.945169529203, 408.3373310062108, 4446.642986729959, 8394.837642639279, 1693.6929244967146, 3522.0638833558696, 6757.889400091187, 3880.272147966124, 5217.765615116016, 2932.9643401414687, 5593.329617261931, 719.8378531936725, 5943.618417464094, 5920.1486401339835, 7132.94547233021, 6585.415631271637, 5935.0697652702775, 5164.741918730072, 8113.980573868633, 7323.145321098291, 8009.086394051613, 2212.0171434053386, 1746.4930834974455, 9048.247733019416, 3159.340611534652, 3217.964000170145, 2407.395662009042, 8591.248267778044, 4909.184821938975, 1767.1551092892937, 5480.632229596376, 681.9575750191947, 2420.269942700946, 4.309631934480428, 7537.742686884229, 5952.8274971264045, 5977.241327019276, 3904.0811446746748, 4665.412223578725, 543.1835688003591, 39.06007136489324, 4732.024550706096, 4815.249361535213, 8829.251152715076, 9727.334280484996, 921.9983822903248, 1910.4154139563882, 7547.235912821322, 1554.8798657477062, 102.8665756300059, 8625.929824729585, 7134.940888744424, 4421.596014920845, 6167.913652189636, 1620.0490243051263, 4546.7090913445545, 3348.722065809788, 8235.208766199134, 8011.832654246585, 3415.473584519769, 908.8252582277522, 6107.010760680597, 2662.2813156788698, 8289.289033515777, 5638.553533511908, 6286.466513868685, 2037.7508951506184, 5905.75457639699, 4496.793833230597, 4572.678270040424, 9828.970669639884, 5115.732507499292, 2585.7173862917007, 9258.843883291654, 5182.998073175571, 3040.28572648581, 9376.106506215448, 872.5070629733556, 5553.1551673146905, 3914.4131740461703, 4953.042928626559, 6362.886117205218, 1775.4184221112334, 5339.9006860969, 2080.7322049251575, 257.55963778250845, 7057.837740466841, 4398.905831951017, 2703.8567003848334, 6762.100139638175, 189.11965495096487, 8026.509842758787, 8835.61447523458, 8919.300112783554, 8443.736456270271}
},
            Local {
                last_timer_value: 0,
                start_stack: start_stack as u32,
                largest_stack: start_stack as u32,
                start: 0
            },
            init::Monotonics(mono),
        )
    }

    #[task(shared = [result_matrix, a_matrix, b_matrix, concurrent_tasks, timer, usart])]
    fn task_reference(ctx: task_reference::Context) {
        let start = time_us_64(ctx.shared.timer);
        for i in 0..crate::RESULT_MATRIX_ROWS {
            for j in 0..crate::RESULT_MATRIX_COLUMNS {
                let mut tmp: f64 = 0.0;
                for k in 0..crate::A_MATRIX_COLUMNS {
                    tmp = tmp
                        + ctx.shared.a_matrix[i * crate::A_MATRIX_COLUMNS + k]
                            * ctx.shared.b_matrix[k * crate::B_MATRIX_COLUMNS + j];
                }

                ctx.shared.result_matrix[i * crate::RESULT_MATRIX_COLUMNS + j] = tmp;
            }
        }
        core::hint::black_box(ctx.shared.result_matrix);
        let tim = ctx.shared.timer;
        let usart = ctx.shared.usart;
        let end_time = time_us_64(tim);
        writeln!(usart, "{:?}", end_time - start).ok();
        reset(tim);
    }

    #[task(shared = [result_matrix, a_matrix, b_matrix, concurrent_tasks, timer, usart], local = [start_stack, largest_stack, start], capacity = 40)]
    fn task_i_row(ctx: task_i_row::Context, i: usize) {
        if i == 0 {
            *ctx.local.start = time_us_64(ctx.shared.timer);
        }
        //tick(ctx.local.largest_stack);
        for j in 0..crate::RESULT_MATRIX_COLUMNS {
            let mut tmp: f64 = 0.0;
            for k in 0..crate::A_MATRIX_COLUMNS {
                //tick(ctx.local.largest_stack);
                tmp = tmp
                    + ctx.shared.a_matrix[i * crate::A_MATRIX_COLUMNS + k]
                        * ctx.shared.b_matrix[k * crate::B_MATRIX_COLUMNS + j];
            }

            ctx.shared.result_matrix[i * crate::RESULT_MATRIX_COLUMNS + j] = tmp;
        }
        let n_tasks = ctx.shared.concurrent_tasks;
        let tim = ctx.shared.timer;
        let usart = ctx.shared.usart;

        core::hint::black_box(ctx.shared.result_matrix);
        //tick(ctx.local.largest_stack);

        *n_tasks = *n_tasks - 1;
        if *n_tasks == 0 {
            let end_time = time_us_64(tim);
            //tick(ctx.local.largest_stack);
            writeln!(usart, "{:?}", end_time - *ctx.local.start).ok();
            //writeln!(usart, "{:08x}", *ctx.local.largest_stack).ok();
            reset(tim);
        }
    }
}
